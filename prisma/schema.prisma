generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Subject {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  nrCursuri   Int
  nrLectii    Int
  maxCapacity Int
  teachers    Teacher[]
  bookings    Booking[]
}


model Teacher {
  id             Int             @id @default(autoincrement())
  name           String
  email          String?
  subjectId      Int
  bookings       Booking[]
  calendarEvents CalendarEvent[]
  subject        Subject         @relation(fields: [subjectId], references: [id])
}

model Student {
  id       Int       @id @default(autoincrement())
  name     String
  email    String    @unique
  phone    String?
  bookings Booking[]
}

model Booking {
  id        Int           @id @default(autoincrement())
  studentId Int
  teacherId Int
  timeslot  String
  status    BookingStatus @default(PENDING)
  createdAt DateTime      @default(now())
  subjectId Int
  date      DateTime
  student   Student       @relation(fields: [studentId], references: [id])
  subject   Subject       @relation(fields: [subjectId], references: [id])
  teacher   Teacher       @relation(fields: [teacherId], references: [id])
}

model CalendarEvent {
  id             Int      @id @default(autoincrement())
  teacherId      Int
  date           DateTime
  timeslot       String
  googleEventId  String
  outlookEventId String?
  teacher        Teacher  @relation(fields: [teacherId], references: [id])

  @@unique([teacherId, date, timeslot], name: "unique_event_per_slot")
}

model OAuthToken {
  id           String   @id
  provider     String
  accessToken  String
  refreshToken String
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELED
}
